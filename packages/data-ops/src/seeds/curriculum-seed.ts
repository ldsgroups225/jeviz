import type {
  FlashcardCreate as FlashcardCreateType,
} from '@/zod-schema/flashcards';
// Type imports from zod-schema
import type {
  ChapterCreate,
  SubjectCreate,
} from '@/zod-schema/subjects';
import { eq } from 'drizzle-orm';

// Ivory Coast Curriculum Seed Data for Jeviz
import { getDb } from '@/database/setup';
import {
  chapters,
  flashcards,
  subjects,
} from '@/drizzle/schema';

// 3√®me BEPC Subjects (all students take these 12 subjects)
const troisiemeSubjects: SubjectCreate[] = [
  {
    name: 'Fran√ßais',
    shortName: 'FR',
    grade: '3√®me' as const,
    coefficient: 4,
    examDuration: 180,
    examFormat: '√©crit' as const,
    isCore: true,
    languageChoice: false,
    description: 'Langue fran√ßaise, litt√©rature, expression √©crite et orale',
    color: '#0066CC',
    icon: 'üìñ',
  },
  {
    name: 'Math√©matiques',
    shortName: 'MATH',
    grade: '3√®me' as const,
    coefficient: 4,
    examDuration: 180,
    examFormat: '√©crit' as const,
    isCore: true,
    languageChoice: false,
    description: 'Calcul, alg√®bre, g√©om√©trie, statistiques',
    color: '#FF6B6B',
    icon: 'üî¢',
  },
  {
    name: 'Histoire et G√©ographie',
    shortName: 'H-G',
    grade: '3√®me' as const,
    coefficient: 3,
    examDuration: 150,
    examFormat: '√©crit' as const,
    isCore: true,
    languageChoice: false,
    description: 'Histoire de la C√¥te d\'Ivoire et du monde, g√©ographie physique et humaine',
    color: '#4ECDC4',
    icon: 'üåç',
  },
  {
    name: 'Sciences de la Vie et de la Terre',
    shortName: 'SVT',
    grade: '3√®me' as const,
    coefficient: 3,
    examDuration: 150,
    examFormat: '√©crit' as const,
    isCore: true,
    languageChoice: false,
    description: 'Biologie, g√©ologie, √©cologie, sant√©',
    color: '#95E77E',
    icon: 'üî¨',
  },
  {
    name: 'Physique-Chimie',
    shortName: 'PC',
    grade: '3√®me' as const,
    coefficient: 3,
    examDuration: 150,
    examFormat: '√©crit' as const,
    isCore: true,
    languageChoice: false,
    description: 'Mati√®re, √©nergie, forces, r√©actions chimiques',
    color: '#FFB347',
    icon: '‚öóÔ∏è',
  },
  {
    name: 'Anglais',
    shortName: 'ENG',
    grade: '3√®me' as const,
    coefficient: 2,
    examDuration: 120,
    examFormat: '√©crit' as const,
    isCore: true,
    languageChoice: false,
    description: 'English language, grammar, vocabulary, comprehension',
    color: '#B4A7D6',
    icon: 'üá¨üáß',
  },
  {
    name: '√âducation Civique et Morale',
    shortName: 'ECM',
    grade: '3√®me' as const,
    coefficient: 2,
    examDuration: 120,
    examFormat: '√©crit' as const,
    isCore: true,
    languageChoice: false,
    description: 'Citoyennet√©, droits et devoirs, institutions ivoiriennes',
    color: '#F4A460',
    icon: '‚öñÔ∏è',
  },
  {
    name: 'Technologie',
    shortName: 'TECH',
    grade: '3√®me' as const,
    coefficient: 2,
    examDuration: 120,
    examFormat: '√©crit' as const,
    isCore: true,
    languageChoice: false,
    description: 'Informatique, technologies modernes, innovation',
    color: '#87CEEB',
    icon: 'üíª',
  },
  {
    name: 'Arts Plastiques',
    shortName: 'ART',
    grade: '3√®me' as const,
    coefficient: 1,
    examDuration: 90,
    examFormat: 'pratique' as const,
    isCore: false,
    languageChoice: false,
    description: 'Dessin, peinture, histoire de l\'art',
    color: '#DDA0DD',
    icon: 'üé®',
  },
  {
    name: '√âducation Physique et Sportive',
    shortName: 'EPS',
    grade: '3√®me' as const,
    coefficient: 1,
    examDuration: 60,
    examFormat: 'pratique' as const,
    isCore: false,
    languageChoice: false,
    description: 'Sports, sant√©, d√©veloppement physique',
    color: '#98FB98',
    icon: '‚öΩ',
  },
  {
    name: '√âducation Musicale',
    shortName: 'MUS',
    grade: '3√®me' as const,
    coefficient: 1,
    examDuration: 60,
    examFormat: 'pratique' as const,
    isCore: false,
    languageChoice: false,
    description: 'Th√©orie musicale, chant, instruments',
    color: '#FFDAB9',
    icon: 'üéµ',
  },
  {
    name: '√âducation Familiale et Sociale',
    shortName: 'EFS',
    grade: '3√®me' as const,
    coefficient: 1,
    examDuration: 60,
    examFormat: 'oral' as const,
    isCore: false,
    languageChoice: false,
    description: 'Vie familiale, d√©veloppement de l\'enfant, soci√©t√©',
    color: '#F0E68C',
    icon: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
  },
];

// Terminale BAC Subjects - Series A, C, D, E, G
const terminaleSubjects: SubjectCreate[] = [
  {
    name: 'Fran√ßais',
    shortName: 'FR',
    grade: 'Terminale' as const,
    series: ['A', 'C', 'D', 'E', 'G'],
    coefficient: 5,
    examDuration: 240,
    examFormat: '√©crit' as const,
    isCore: true,
    languageChoice: false,
    description: 'Litt√©rature, philosophie, expression √©crite et orale',
    color: '#0066CC',
    icon: 'üìñ',
  },
  {
    name: 'Philosophie',
    shortName: 'PHILO',
    grade: 'Terminale' as const,
    series: ['A', 'C', 'D', 'E', 'G'],
    coefficient: 4,
    examDuration: 240,
    examFormat: '√©crit' as const,
    isCore: true,
    languageChoice: false,
    description: 'Pens√©e critique, √©thique, m√©taphysique, logique',
    color: '#9370DB',
    icon: 'ü§î',
  },
  {
    name: 'Math√©matiques',
    shortName: 'MATH',
    grade: 'Terminale' as const,
    series: ['C', 'D'],
    coefficient: 6,
    examDuration: 240,
    examFormat: '√©crit' as const,
    isCore: true,
    languageChoice: false,
    description: 'Alg√®bre avanc√©e, g√©om√©trie, calcul diff√©rentiel, probabilit√©s',
    color: '#FF6B6B',
    icon: 'üî¢',
  },
  {
    name: 'Physique-Chimie',
    shortName: 'PC',
    grade: 'Terminale' as const,
    series: ['C', 'D'],
    coefficient: 5,
    examDuration: 240,
    examFormat: '√©crit' as const,
    isCore: true,
    languageChoice: false,
    description: 'M√©canique, thermodynamique, optique, chimie organique',
    color: '#FFB347',
    icon: '‚öóÔ∏è',
  },
  {
    name: 'Sciences de la Vie et de la Terre',
    shortName: 'SVT',
    grade: 'Terminale' as const,
    series: ['D'],
    coefficient: 5,
    examDuration: 240,
    examFormat: '√©crit' as const,
    isCore: true,
    languageChoice: false,
    description: 'G√©n√©tique, √©volution, physiologie, √©cologie',
    color: '#95E77E',
    icon: 'üî¨',
  },
  {
    name: 'Allemand',
    shortName: 'ALL',
    grade: 'Terminale' as const,
    series: ['A', 'C', 'D'],
    coefficient: 3,
    examDuration: 180,
    examFormat: '√©crit' as const,
    isCore: false,
    languageChoice: true,
    mutualExclusiveWith: undefined, // Will be set after insertion
    description: 'Deutsche Sprache, Grammatik, Literatur',
    color: '#FFD700',
    icon: 'üá©üá™',
  },
  {
    name: 'Espagnol',
    shortName: 'ESP',
    grade: 'Terminale' as const,
    series: ['A', 'C', 'D'],
    coefficient: 3,
    examDuration: 180,
    examFormat: '√©crit' as const,
    isCore: false,
    languageChoice: true,
    mutualExclusiveWith: undefined, // Will be set after insertion
    description: 'Lengua espa√±ola, gram√°tica, literatura',
    color: '#FF7F50',
    icon: 'üá™üá∏',
  },
  {
    name: 'Histoire et G√©ographie',
    shortName: 'H-G',
    grade: 'Terminale' as const,
    series: ['A'],
    coefficient: 4,
    examDuration: 240,
    examFormat: '√©crit' as const,
    isCore: true,
    languageChoice: false,
    description: 'Histoire contemporaine, g√©ographie √©conomique et politique',
    color: '#4ECDC4',
    icon: 'üåç',
  },
  {
    name: '√âconomie',
    shortName: 'ECO',
    grade: 'Terminale' as const,
    series: ['E', 'G'],
    coefficient: 4,
    examDuration: 240,
    examFormat: '√©crit' as const,
    isCore: true,
    languageChoice: false,
    description: 'Micro√©conomie, macro√©conomie, √©conomie ivoirienne',
    color: '#32CD32',
    icon: 'üí∞',
  },
  {
    name: 'Comptabilit√©',
    shortName: 'COMPTA',
    grade: 'Terminale' as const,
    series: ['G'],
    coefficient: 5,
    examDuration: 240,
    examFormat: '√©crit' as const,
    isCore: true,
    languageChoice: false,
    description: 'Comptabilit√© g√©n√©rale, analytique, gestion financi√®re',
    color: '#8B4513',
    icon: 'üìä',
  },
  {
    name: 'Droit',
    shortName: 'DROIT',
    grade: 'Terminale' as const,
    series: ['G'],
    coefficient: 3,
    examDuration: 180,
    examFormat: '√©crit' as const,
    isCore: false,
    languageChoice: false,
    description: 'Droit civil, commercial, droit des affaires',
    color: '#696969',
    icon: '‚öñÔ∏è',
  },
  {
    name: 'Anglais',
    shortName: 'ENG',
    grade: 'Terminale' as const,
    series: ['A', 'C', 'D', 'E', 'G'],
    coefficient: 2,
    examDuration: 180,
    examFormat: '√©crit' as const,
    isCore: true,
    languageChoice: false,
    description: 'English language, literature, business communication',
    color: '#B4A7D6',
    icon: 'üá¨üáß',
  },
];

// Chapter data generation functions
function getChaptersForMath3eme(): Omit<ChapterCreate, 'subjectId'>[] {
  return [
    {
      title: 'Op√©rations sur les nombres relatifs',
      description: 'Addition, soustraction, multiplication et division des nombres relatifs',
      order: 1,
      estimatedHours: 8,
      difficulty: 'facile' as const,
      objectives: ['Ma√Ætriser les op√©rations de base', 'Comprendre les r√®gles des signes'],
      prerequisites: ['Connaissance des nombres entiers'],
      isActive: true,
    },
    {
      title: '√âquations du premier degr√©',
      description: 'R√©solution d\'√©quations √† une inconnue et mise en √©quation de probl√®mes',
      order: 2,
      estimatedHours: 10,
      difficulty: 'moyen' as const,
      objectives: ['R√©soudre des √©quations lin√©aires', 'Traduire des probl√®mes en √©quations'],
      prerequisites: ['Op√©rations sur les relatifs'],
      isActive: true,
    },
    {
      title: 'In√©quations du premier degr√©',
      description: 'R√©solution d\'in√©quations et repr√©sentation graphique des solutions',
      order: 3,
      estimatedHours: 8,
      difficulty: 'moyen' as const,
      objectives: ['R√©soudre des in√©quations', 'Repr√©senter des solutions'],
      prerequisites: ['√âquations du premier degr√©'],
      isActive: true,
    },
    {
      title: 'Syst√®mes de deux √©quations',
      description: 'R√©solution de syst√®mes par substitution et par combinaison',
      order: 4,
      estimatedHours: 12,
      difficulty: 'moyen' as const,
      objectives: ['R√©soudre des syst√®mes 2x2', 'Appliquer √† des probl√®mes concrets'],
      prerequisites: ['√âquations du premier degr√©'],
      isActive: true,
    },
    {
      title: 'Puissances et racines carr√©es',
      description: 'Propri√©t√©s des puissances, calculs avec les racines carr√©es',
      order: 5,
      estimatedHours: 8,
      difficulty: 'moyen' as const,
      objectives: ['Calculer avec les puissances', 'Simplifier les racines'],
      prerequisites: ['Op√©rations de base'],
      isActive: true,
    },
    {
      title: 'Calcul litt√©ral',
      description: 'D√©veloppement, factorisation et identit√©s remarquables',
      order: 6,
      estimatedHours: 12,
      difficulty: 'difficile' as const,
      objectives: ['D√©velopper et factoriser', 'Utiliser les identit√©s remarquables'],
      prerequisites: ['Puissances et op√©rations'],
      isActive: true,
    },
  ];
}

function getChaptersForFrancais3eme(): Omit<ChapterCreate, 'subjectId'>[] {
  return [
    {
      title: 'Les types de textes',
      description: 'Identifier et analyser les diff√©rents types de textes (narratif, descriptif, argumentatif)',
      order: 1,
      estimatedHours: 6,
      difficulty: 'facile' as const,
      objectives: ['Reconna√Ætre les types de textes', 'Analyser la structure des textes'],
      prerequisites: ['Lecture compr√©hension de base'],
      isActive: true,
    },
    {
      title: 'La phrase complexe',
      description: 'Construction et analyse des phrases complexes avec propositions subordonn√©es',
      order: 2,
      estimatedHours: 10,
      difficulty: 'moyen' as const,
      objectives: ['Construire des phrases complexes', 'Identifier les propositions'],
      prerequisites: ['La phrase simple'],
      isActive: true,
    },
    {
      title: 'Les figures de style',
      description: 'Identification et utilisation des figures de style en litt√©rature',
      order: 3,
      estimatedHours: 8,
      difficulty: 'moyen' as const,
      objectives: ['Reconna√Ætre les figures de style', 'En analyser l\'effet'],
      prerequisites: ['Vocabulaire litt√©raire de base'],
      isActive: true,
    },
    {
      title: 'La po√©sie',
      description: 'Analyse de po√®mes et versification fran√ßaise',
      order: 4,
      estimatedHours: 8,
      difficulty: 'moyen' as const,
      objectives: ['Analyser un po√®me', 'Comprendre la versification'],
      prerequisites: ['Figures de style'],
      isActive: true,
    },
    {
      title: 'Le th√©√¢tre',
      description: '√âtude de pi√®ces th√©√¢trales et analyse dialogu√©e',
      order: 5,
      estimatedHours: 10,
      difficulty: 'difficile' as const,
      objectives: ['Analyser une pi√®ce de th√©√¢tre', 'Comprendre les dialogues'],
      prerequisites: ['Analyse textuelle'],
      isActive: true,
    },
    {
      title: 'L\'argumentation',
      description: 'Construction d\'arguments et analyse de textes argumentatifs',
      order: 6,
      estimatedHours: 12,
      difficulty: 'difficile' as const,
      objectives: ['Construire un argumentaire', 'Identifier les arguments'],
      prerequisites: ['Types de textes', 'Logique de base'],
      isActive: true,
    },
  ];
}

function getFlashcardsForChapter(chapterTitle: string, subjectShortName: string): Omit<FlashcardCreateType, 'chapterId'>[] {
  if (subjectShortName === 'MATH' && chapterTitle.includes('Op√©rations')) {
    return [
      {
        front: 'Que donne (-5) + (+3) ?',
        back: '-2',
        example: 'On soustrait 3 de 5 et on garde le signe du plus grand : -5 + 3 = -2',
        difficulty: 0.3,
        tags: ['addition', 'nombres relatifs'],
        isActive: true,
      },
      {
        front: 'Quelle est la r√®gle pour multiplier deux nombres de signes diff√©rents ?',
        back: 'Le produit est n√©gatif',
        example: '(-2) √ó (+3) = -6',
        difficulty: 0.4,
        tags: ['multiplication', 'signes'],
        isActive: true,
      },
      {
        front: 'Que donne (-7) - (-2) ?',
        back: '-5',
        example: 'Soustraire un n√©gatif revient √† additionner : (-7) - (-2) = (-7) + 2 = -5',
        difficulty: 0.5,
        tags: ['soustraction', 'nombres relatifs'],
        isActive: true,
      },
      {
        front: 'Comment divise-t-on deux nombres n√©gatifs ?',
        back: 'Le quotient est positif',
        example: '(-12) √∑ (-3) = +4',
        difficulty: 0.4,
        tags: ['division', 'signes'],
        isActive: true,
      },
      {
        front: 'R√®gle des signes pour l\'addition',
        back: 'Si les signes sont identiques, on additionne et on garde le signe. S\'ils sont diff√©rents, on soustrait et on garde le signe du plus grand.',
        example: '(-3) + (-5) = -8 (m√™mes signes), (-7) + (+2) = -5 (signes diff√©rents)',
        difficulty: 0.6,
        tags: ['r√®gle', 'addition', 'mn√©motechnique'],
        isActive: true,
      },
    ];
  }

  if (subjectShortName === 'FR' && chapterTitle.includes('phrase complexe')) {
    return [
      {
        front: 'Qu\'est-ce qu\'une proposition subordonn√©e relative ?',
        back: 'Une proposition qui introduit un compl√©ment du nom et commence par \'qui\', \'que\', \'o√π\', \'dont\', \'lequel\'',
        example: 'L\'homme qui parle est mon professeur.',
        difficulty: 0.4,
        tags: ['subordonn√©e', 'relative', 'grammaire'],
        isActive: true,
      },
      {
        front: 'Comment reconna√Æt-on une proposition subordonn√©e conjonctive ?',
        back: 'Elle commence par une conjonction de subordination (que, quand, si, parce que, etc.)',
        example: 'Je sais qu\'il viendra demain.',
        difficulty: 0.5,
        tags: ['subordonn√©e', 'conjonctive', 'grammaire'],
        isActive: true,
      },
      {
        front: 'Qu\'est-ce qu\'une proposition subordonn√©e infinitive ?',
        back: 'Une proposition avec un verbe √† l\'infinitif introduite par \'de\', \'√†\', \'pour\'',
        example: 'Je veux partir.',
        difficulty: 0.3,
        tags: ['subordonn√©e', 'infinitive', 'grammaire'],
        isActive: true,
      },
      {
        front: 'Comment s\'appelle la proposition principale dans une phrase complexe ?',
        back: 'C\'est celle qui peut se suffire √† elle-m√™me et qui ne d√©pend d\'aucune autre proposition',
        example: 'Dans \'Je mange quand j\'ai faim\', \'Je mange\' est la principale.',
        difficulty: 0.3,
        tags: ['proposition', 'principale', 'grammaire'],
        isActive: true,
      },
    ];
  }

  // Default flashcards for other chapters
  return [
    {
      front: `Quelle est l'importance de ${chapterTitle} ?`,
      back: `C'est un concept fondamental qui aide √† comprendre les notions plus avanc√©es.`,
      difficulty: 0.5,
      tags: ['concept', 'fondamental'],
      isActive: true,
    },
  ];
}

async function seedCurriculum(): Promise<{
  subjects: number;
  chapters: number;
  flashcards: string;
}> {
  const db = getDb();

  console.log('üå± Starting Ivory Coast curriculum seed...');

  try {
    // 1. Seed subjects
    console.log('üìö Seeding subjects...');
    const allSubjects = [...troisiemeSubjects, ...terminaleSubjects];
    const insertedSubjects = await db.insert(subjects)
      .values(allSubjects)
      .returning();

    console.log(`‚úÖ Inserted ${insertedSubjects.length} subjects`);

    // 2. Handle mutual exclusivity for language subjects
    const allemandSubject = insertedSubjects.find(s => s.shortName === 'ALL');
    const espagnolSubject = insertedSubjects.find(s => s.shortName === 'ESP');

    if (allemandSubject && espagnolSubject) {
      await db.update(subjects)
        .set({ mutualExclusiveWith: espagnolSubject.id })
        .where(eq(subjects.id, allemandSubject.id));

      await db.update(subjects)
        .set({ mutualExclusiveWith: allemandSubject.id })
        .where(eq(subjects.id, espagnolSubject.id));
    }

    // 3. Seed chapters for each subject
    console.log('üìñ Seeding chapters...');
    let totalChapters = 0;

    for (const subject of insertedSubjects) {
      let chapterData: Omit<ChapterCreate, 'subjectId'>[] = [];

      if (subject.grade === '3√®me' && subject.shortName === 'MATH') {
        chapterData = getChaptersForMath3eme();
      }
      else if (subject.grade === '3√®me' && subject.shortName === 'FR') {
        chapterData = getChaptersForFrancais3eme();
      }
      else {
        // Generic chapters for other subjects
        const chapterCount = subject.isCore ? 6 : 4;
        chapterData = Array.from({ length: chapterCount }, (_, i) => ({
          title: `Chapitre ${i + 1}`,
          description: `Chapitre ${i + 1} de ${subject.name}`,
          order: i + 1,
          estimatedHours: subject.isCore ? 8 : 6,
          difficulty: i < 2 ? 'facile' as const : i < 4 ? 'moyen' as const : 'difficile' as const,
          objectives: [`Objectif ${i + 1} du chapitre`],
          prerequisites: i > 0 ? [`Chapitre ${i}`] : [],
          isActive: true,
        }));
      }

      const insertedChapters = await db.insert(chapters)
        .values(chapterData.map(ch => ({ ...ch, subjectId: subject.id, estimatedHours: String(ch.estimatedHours) })))
        .returning();

      totalChapters += insertedChapters.length;
      console.log(`  üìÑ ${insertedChapters.length} chapters for ${subject.name}`);

      // 4. Seed flashcards for each chapter
      for (const chapter of insertedChapters) {
        const flashcardData = getFlashcardsForChapter(chapter.title, subject.shortName);

        if (flashcardData.length > 0) {
          await db.insert(flashcards)
            .values(flashcardData.map(fc => ({ ...fc, chapterId: chapter.id, difficulty: String(fc.difficulty) })));
          console.log(`    üí≥ ${flashcardData.length} flashcards for ${chapter.title}`);
        }
      }
    }

    console.log(`‚úÖ Total: ${totalChapters} chapters seeded`);
    console.log('üéâ Curriculum seed completed successfully!');

    return {
      subjects: insertedSubjects.length,
      chapters: totalChapters,
      flashcards: 'Sample flashcards created',
    };
  }
  catch (error) {
    console.error('‚ùå Curriculum seed failed:', error);
    throw error;
  }
}

// Run seed function if this file is executed directly
if (require.main === module) {
  seedCurriculum()
    .then((result) => {
      console.log('üéâ All seeds completed successfully!');
      console.log('Result:', result);
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Seed failed:', error);
      process.exit(1);
    });
}

// Type exports
export type CurriculumSeedResult = ReturnType<typeof seedCurriculum> extends Promise<infer T> ? T : never;

export { seedCurriculum };
